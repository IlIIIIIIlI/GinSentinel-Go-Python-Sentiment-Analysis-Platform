// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sentiment/v1/sentiment.proto

package sentimentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SentimentAnalyzer_AnalyzeSentiment_FullMethodName      = "/sentiment.v1.SentimentAnalyzer/AnalyzeSentiment"
	SentimentAnalyzer_BatchAnalyzeSentiment_FullMethodName = "/sentiment.v1.SentimentAnalyzer/BatchAnalyzeSentiment"
)

// SentimentAnalyzerClient is the client API for SentimentAnalyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SentimentAnalyzerClient interface {
	// 分析单个文本
	AnalyzeSentiment(ctx context.Context, in *SentimentRequest, opts ...grpc.CallOption) (*SentimentResponse, error)
	// 流式批量分析
	BatchAnalyzeSentiment(ctx context.Context, opts ...grpc.CallOption) (SentimentAnalyzer_BatchAnalyzeSentimentClient, error)
}

type sentimentAnalyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewSentimentAnalyzerClient(cc grpc.ClientConnInterface) SentimentAnalyzerClient {
	return &sentimentAnalyzerClient{cc}
}

func (c *sentimentAnalyzerClient) AnalyzeSentiment(ctx context.Context, in *SentimentRequest, opts ...grpc.CallOption) (*SentimentResponse, error) {
	out := new(SentimentResponse)
	err := c.cc.Invoke(ctx, SentimentAnalyzer_AnalyzeSentiment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentimentAnalyzerClient) BatchAnalyzeSentiment(ctx context.Context, opts ...grpc.CallOption) (SentimentAnalyzer_BatchAnalyzeSentimentClient, error) {
	stream, err := c.cc.NewStream(ctx, &SentimentAnalyzer_ServiceDesc.Streams[0], SentimentAnalyzer_BatchAnalyzeSentiment_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sentimentAnalyzerBatchAnalyzeSentimentClient{stream}
	return x, nil
}

type SentimentAnalyzer_BatchAnalyzeSentimentClient interface {
	Send(*SentimentRequest) error
	Recv() (*SentimentResponse, error)
	grpc.ClientStream
}

type sentimentAnalyzerBatchAnalyzeSentimentClient struct {
	grpc.ClientStream
}

func (x *sentimentAnalyzerBatchAnalyzeSentimentClient) Send(m *SentimentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sentimentAnalyzerBatchAnalyzeSentimentClient) Recv() (*SentimentResponse, error) {
	m := new(SentimentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SentimentAnalyzerServer is the server API for SentimentAnalyzer service.
// All implementations must embed UnimplementedSentimentAnalyzerServer
// for forward compatibility
type SentimentAnalyzerServer interface {
	// 分析单个文本
	AnalyzeSentiment(context.Context, *SentimentRequest) (*SentimentResponse, error)
	// 流式批量分析
	BatchAnalyzeSentiment(SentimentAnalyzer_BatchAnalyzeSentimentServer) error
	mustEmbedUnimplementedSentimentAnalyzerServer()
}

// UnimplementedSentimentAnalyzerServer must be embedded to have forward compatible implementations.
type UnimplementedSentimentAnalyzerServer struct {
}

func (UnimplementedSentimentAnalyzerServer) AnalyzeSentiment(context.Context, *SentimentRequest) (*SentimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeSentiment not implemented")
}
func (UnimplementedSentimentAnalyzerServer) BatchAnalyzeSentiment(SentimentAnalyzer_BatchAnalyzeSentimentServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchAnalyzeSentiment not implemented")
}
func (UnimplementedSentimentAnalyzerServer) mustEmbedUnimplementedSentimentAnalyzerServer() {}

// UnsafeSentimentAnalyzerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SentimentAnalyzerServer will
// result in compilation errors.
type UnsafeSentimentAnalyzerServer interface {
	mustEmbedUnimplementedSentimentAnalyzerServer()
}

func RegisterSentimentAnalyzerServer(s grpc.ServiceRegistrar, srv SentimentAnalyzerServer) {
	s.RegisterService(&SentimentAnalyzer_ServiceDesc, srv)
}

func _SentimentAnalyzer_AnalyzeSentiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentimentAnalyzerServer).AnalyzeSentiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentimentAnalyzer_AnalyzeSentiment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentimentAnalyzerServer).AnalyzeSentiment(ctx, req.(*SentimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SentimentAnalyzer_BatchAnalyzeSentiment_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SentimentAnalyzerServer).BatchAnalyzeSentiment(&sentimentAnalyzerBatchAnalyzeSentimentServer{stream})
}

type SentimentAnalyzer_BatchAnalyzeSentimentServer interface {
	Send(*SentimentResponse) error
	Recv() (*SentimentRequest, error)
	grpc.ServerStream
}

type sentimentAnalyzerBatchAnalyzeSentimentServer struct {
	grpc.ServerStream
}

func (x *sentimentAnalyzerBatchAnalyzeSentimentServer) Send(m *SentimentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sentimentAnalyzerBatchAnalyzeSentimentServer) Recv() (*SentimentRequest, error) {
	m := new(SentimentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SentimentAnalyzer_ServiceDesc is the grpc.ServiceDesc for SentimentAnalyzer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SentimentAnalyzer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sentiment.v1.SentimentAnalyzer",
	HandlerType: (*SentimentAnalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeSentiment",
			Handler:    _SentimentAnalyzer_AnalyzeSentiment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchAnalyzeSentiment",
			Handler:       _SentimentAnalyzer_BatchAnalyzeSentiment_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sentiment/v1/sentiment.proto",
}
